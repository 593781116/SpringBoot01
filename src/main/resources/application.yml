#key后面的冒号，后面一定要跟一个空格
server:
  port: 8081

spring:
  profiles:
    active: dev
#原有的key，例如spring.jpa.properties.hibernate.dialect，按“.”分割，都变成树状的配置
#把原有的application.properties删掉。然后一定要执行一下  maven -X clean install
com:
  neo:
    title: 少年不识愁滋味，爱上层楼，爱上层楼。为赋新词强说愁。
    next: 如今识尽愁滋味，欲说还休，欲说还休，却道天凉好个秋。

logging:
      path: D:\用户目录\我的音乐\SpBootLog
    level:
      com:
        favorites: DEBUG
      org:s
        springframework:
          web: INFO
        hibernate: ERROR
spring:
  datasource:
    url: jdbc:mysql://localhost:3306/test
spring:
  datasource:
    username: root
    password: root
    driver-class-name: com.mysql.jdbc.Driver
#dialect 主要是指定生成表名的存储引擎为InneoDB
#show-sql 是否打印出自动生产的SQL，方便调试的时候查看
spring.jpa:
  show-sql: true
  properties.hibernate:
    hbm2ddl.auto: update
    dialect: org.hibernate.dialect.MySQL5InnoDBDialect
 #create： 每次加载hibernate时都会删除上一次的生成的表，然后根据你的model类再重新来生成新表，哪怕两次没有任何改变也要这样执行，这就是导致数据库表数据丢失的一个重要原因。
 #create-drop ：每次加载hibernate时根据model类生成表，但是sessionFactory一关闭,表就自动删除。
 #update：最常用的属性，第一次加载hibernate时根据model类会自动建立起表的结构（前提是先建立好数据库），以后加载hibernate时根据 model类自动更新表结构，即使表结构改变了但表中的行仍然存在不会删除以前的行。要注意的是当部署到服务器后，表结构是不会被马上建立起来的，是要等 应用第一次运行起来后才会。
 #validate ：每次加载hibernate时，验证创建数据库表结构，只会和数据库中的表进行比较，不会创建新表，但是会插入新值。

 spring:
  redis:
    database: 0
    host: 192.168.0.58
    port: 6379
    password:
    poll:
      max-active: 8
      max-wait: -1
      max-idle: 8
      min-idle: 0
    timeout: 0

